# -*- coding: utf-8 -*-
"""tarea 4 progra

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Os71dD-pb5r1ERYQgXHIZMED4qKtXD-

1) Analizador de una lista entera (todo-en-uno de una sola lista)
"""

#Introducir el tamaño de la futura lista
n=0
while True:
    n=int(input("Introduce un número entero mayor a cero: "))
    if n>0:
      break

lista= []
for i in range(n): #Range(elemento inicial, elemento final, incremento)
    valores = int(input(f"Introduce un número entero {i+1}: "))
    lista.append(valores) #.append sirve para agregar los valores a una lista al último.

# 1.Índice creciente
for i in range(n):
    print(f"índice[{i}] = {lista[i]}")

# Índices negativos en orden inverso
for k in range(1, n+1):
    print(f"índice[-{k}] = {lista[-k]}")

# Lista en formato Python
print(lista)

#Calcular y mostrar el promedio
promedio = sum(lista) / n
print(f"El promedio es: {promedio}")

#Contar pares e impares
pares = 0
impares = 0
for y in lista:
    if y % 2 == 0:
        pares += 1
    else:
        impares += 1

print(f"PARES={pares}")
print(f"IMPARES={impares}")

#Construir lista al cuadrado
cuadrados = [x ** 2 for x in lista]
print("CUADRADOS")
print(cuadrados)

# 7. Sublista de pares
pares_lista = [s for s in lista if s % 2 == 0]
print("PARES_LISTA")
print(pares_lista)

# 8. Sublista de impares
impares_lista = [a for a in lista if a % 2 != 0]
print("IMPARES_LISTA")
print(impares_lista)

# 9. Valores menores que su siguiente
print("MENORES_QUE_EL_SIGUIENTE")
for i in range(n - 1):
    if lista[i] < lista[i + 1]:
        print(lista[i])

"""2) Dúo de listas: suma por posición, ordenación y sin duplicados"""

# Leer m hasta que sea mayor que 0
m = 0
while m <= 0:
    m = int(input("Introduzca el tamaño de sus listas: "))

# Leer m enteros para L1
L1 = []
for i in range(m):
    valor = int(input("Introduzca un valor entero para la lista 1: "))
    L1.append(valor)

# Leer m enteros para L2
L2 = []
for i in range(m):
    valor = int(input("Introduzca un valor entero para la lista 2: "))
    L2.append(valor)

# Suma de L1[i] + L2[i]
LSUMA = []
for i in range(m):
    suma = L1[i] + L2[i]
    LSUMA.append(suma)

# Crear LORDENADA concatenando L1+L2 usando sorted para ordenar los valores de manera acendente.
LORDENADA = sorted(L1 + L2)

# Crear LUNICA eliminando duplicados de LORDENADA preservando el orden de aparición
LUNICA =set(LORDENADA)

# Mostrar los resultados en el orden especificado
print(f"L1= {L1}")
print(f"L2= {L2}")
print(f"LSUMA= {LSUMA}")
print(f"LORDENADA= {LORDENADA}")
print(f"LUNICA= {LUNICA}")

"""3) Menú de funciones: dígitos faltantes, Fibonacci y combinación de strings

"""

def digitos_faltantes():#Para indicar cuántos digitos debe tener la lista.
  while True:
    t=int(input("Introduce un entero entre 0 y 10: "))
    if 0<=t<=10: #Si t está entre 0 y 10, se rompe el ciclo.
      break

  digitos=[] #Inicialice una lista
  for i in range(t): #Para cada número de t.
    numero=int(input(f"Introduce el dígito número {i+1} entre 1 a 9: ")) #Solicite un número entre 1 y 9.
    if 0<=numero<=9:
      digitos.append(numero) #Si la condución se cumple, agregue el valor a la lista dígitos.

  falta=[] #Inicalice una lista.
  for k in range(1,10): #Itere el rango de 1 a 10.
    if k not in digitos:
      falta.append(k)#Si el número no está en la lista de dígitos, se añade a la lista de faltantes.

  if falta:
    for n in falta:
      print(n, end=" ") #Separe los valores con espacios
  else:
      print(falta)


def fibonacci(): #Cree una función que imprima los numeros de fibonacci hasta n.
  while True:
    n=int(input("Introduzca un entero mayor o igual a 0: ")) #Untroducir el número de dígitos se quieren
    if n>=0: #Si el número es positivo, se rompe el ciclo.
      break

  fib=[0,1] #Se inicializa la lista con los primeros términos
  if n==0:
    fib=[] #Si n es 0, no se escribe nada en la lista
  elif n==1:
    fib=[0] #Si n es 1, se sobreescribe la lista con 0.
  elif n>=3:
    for f in range(2,n):
      nter=fib[f - 2]+fib[f - 1]
      fib.append(nter) #Si n es mayor a 3, se buscan todos los términos en un rango de 2 a n y se anexan a la lista fib.

  print(fib)



def listas_str(): #Se inicializan las dos listas y se introducen las cantidades de cada una.
  L1=[]
  L2=[]
  a=int(input("Introuzca un múmero mayor a 0: "))
  b=int(input("Introduzca otro número mayor a 0: "))

  if a<=0 or b <=0:
    print("Error")#En caso de que a o b sean negativos o 0, se imprime un mensaje de error.

  if a>0 and b >0:
    print(f"-----\n")
    for z in range(a):
      ca1=input("Introduzca una cadena: ") #Se importa una cadena por cada valor de a y se anexa a L1.
      L1.append(ca1)
    print(f"-----\n")
    for y in range (b):
      ca2=input("Introduzca una cadena: ") #Se importa una cadena por cada valor de b Y se anexa a L2.
      L2.append(ca2)
    print(f"-----\n")
    print(f"Lista 1: {L1}\n Lista 2: {L2}") #Se imprimen las dos listas.
    L3 = [] #Se inicializa la lista 3.
    i = 0 #Se inicializa un contador.
    while i < max(len(L1), len(L2)): #Mientras que i sea menor que el largo máximo de las dos listas:
      if i < len(L1):
        L3.append(L1[i]) #Si i es menor que el largo de L1, se añadirá el elemento número i de L1 a L3.
      if i < len(L2):
        L3.append(L2[i])#Si i es menor que el largo de L2, se añadirá el elemento número i de L2 a L3.
      i += 1 #Se le suma 1 al contador.

def main(): #Se crea la función principal.
    while True:
        print("\nMenú de funciones:")
        print("1) Dígitos faltantes (1-9)")
        print("2) Fibonacci en lista")
        print("3) Combinar listas de strings")
        print("4) Salir") #Se imprime el menú.

        opcion = input("Selecciona una opción (1-4): ") #Solicite al usuario introduzca una de las opciones.

        if opcion == "1":
            digitos_faltantes() #Si la opción es 1, se llama a la función digitos_faltantes.
        elif opcion == "2":
            fibonacci() #Si la opción es 2, se llama a la función fibonacci.
        elif opcion == "3":
            listas_str() #Si la opción es 3, se llama a la función listas_str.
        elif opcion == "4":
            print("¡Hasta luego!") #Si la opción es 4, se despide al usuario y rompe el ciclo.
            break
        else:
            print("Opción inválida. Intenta de nuevo.") #Si la opción no es ninguna de las anteriores, se marca un mensaje de error.

if __name__ == "__main__":
    main() #Si este es elarchivo original, se mand a llamar la función main.
